name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main, staging, trying ]
  pull_request:
    branches: [ main ]

jobs:
  cancel_previous_runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
  check:
    name: Rust Check - ${{ matrix.check }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        rust-target: [x86_64-unknown-linux-gnu]
        check: [test, check, fmt, clippy]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy

      - name: Cargo test
        if: ${{ matrix.check == 'test' }}
        run: |
          cargo test

      - name: Cargo check
        if: ${{ matrix.check == 'check' }}
        run: |
          cargo check --all-targets

      - name: Cargo fmt
        if: ${{ matrix.check == 'fmt' }}
        run: cargo fmt -- --check

      - name: Cargo clippy
        if: ${{ matrix.check == 'clippy' }}
        run: cargo clippy -- -D warnings


  build_connector_bins:
    name:  Build ${{ matrix.connector-name }} for ${{ matrix.rust-target }} on (${{ matrix.os }}) 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust-target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
        connector-name:
          - test-connector
          - fluvio-syslog
        rust: [stable]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
      RUST_BIN_DIR: target/${{ matrix.rust-target }}/debug
    steps:
      - uses: actions/checkout@v2
      - name: Set RELEASE mode
        #if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        shell: bash
        run: |
          echo "RELEASE=true" | tee -a $GITHUB_ENV
          echo "RELEASE_NAME=release" | tee -a $GITHUB_ENV
          echo "RUST_BIN_DIR=target/${{ matrix.rust-target }}/release" | tee -a $GITHUB_ENV
      - name: Print env
        run: |
          echo "RUST_BIN_DIR = ${{ env.RUST_BIN_DIR }} "
      - name: Install Rust ${{ matrix.rust }} 
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }} 
          override: true
          target: ${{ matrix.rust-target }}
      - name: Install zig
        run: ./actions/zig-install.sh ${{ matrix.os }}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.os }}-${{ matrix.rust-target }}-${{ matrix.connector-name }}
      - name: Build
        env:
          CONNECTOR_NAME: ${{ matrix.connector-name }}
        run: make build

      # Upload artifacts
      - name: Upload artifact - ${{ matrix.connector-name }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.connector-name }}-${{ matrix.rust-target }}
          path: ${{ env.RUST_BIN_DIR }}/${{ matrix.connector-name }}

  build_containers:
    name: Build containers 
    needs: build_connector_bins 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust-target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
        connector-name: [test-connector]
        image-name: [infinyon/fluvio-connect-test-connector]
        include:
          - connector-name: fluvio-syslog
            image-name: infinyon/fluvio-connect-syslog
        rust: [stable]
    env:
      RUSTV: ${{ matrix.rust }}
      TARGET: ${{ matrix.rust-target }}
    steps:
      - uses: actions/checkout@v2

      # Download artifacts from build
      - name: Download artifact - ${{ matrix.connector-name }} - ${{ matrix.rust-target }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.connector-name }}-${{ matrix.rust-target }}
          # This is the directory the Makefile expects artifacts to live in
          path: container-build 

      - name: Print container-build dir
        run: |
          ls container-build;
          chmod +x ./container-build/${{ matrix.connector-name }}
          ./container-build/${{ matrix.connector-name }} -h || true

      - name: Build containers
        env:
          TARGET: ${{ matrix.rust-target }}
          CONNECTOR_NAME: ${{ matrix.connector-name }}
          COMMIT_HASH: ${{ github.sha }}
          IMAGE_NAME: ${{ matrix.image-name }}
        run: make official-containers
      # TODO: Create docker manifest

  # Job that follows the success of all required jobs in this workflow.
  # Used by Bors to detect that all required jobs have completed successfully
  done:
    name: Done
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    needs: [check]
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: echo "Done!"
